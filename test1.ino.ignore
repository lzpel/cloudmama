//ファイルシステムの導入を中止したため、このソースコードは参照されない
//備忘録として残している

//https://github.com/espressif/arduino-esp32/blob/master/libraries/FS/src/FS.h
#include <FS.h>
#include <FFat.h>

void fatinit(){
  //ファイスシステムFATをマウントする関数。
  //最初に一度だけ呼び出す必要がある。
  //フォーマットは不要
  if(false) FFat.format();
  if(!FFat.begin()){
    Serial.println("FFat Mount Failed");
    return;
  }
  Serial.printf("Total space: %10u\nFree space: %10u\n", FFat.totalBytes(), FFat.freeBytes());
  fattree("/");
}
void fattree(const char * path){
  //指定パス以下のファイルを全て列挙する関数
  File root = FFat.open(path);
  if(!root)return;
  Serial.println(root.name());
  if(root.isDirectory()){
    for(File file=root.openNextFile();file;file=root.openNextFile()){
      fattree(file.name());
      file.close();
    }
  }
  root.close();
}
void fatmove(const char * path,const char* newpath){

}
int fatprint(const char * path,const char*format,...){
  char buf[256];
  va_list va;
  va_start(va, format);
  int ret=vsprintf(buf, format, va);
  va_end(va);
  File file = FFat.open(path, FILE_WRITE);
  file.println(buf);
  file.close();
  return ret;
}
int fatscanf(const char * path,const char*format,...){
  char buf[256];
  File file = FFat.open(path, FILE_READ);
  file.read((uint8_t*)buf,sizeof(buf));
  file.close();
  va_list va;
  va_start(va, format);
  int ret=vsscanf(buf, format, va);
  va_end(va);
  return ret;
}


String HTTPGet(const char* httpurl="http://example.com/index.html"){
  String payload;
  HTTPClient http;
  Serial.print("[HTTP] begin...\n");
  // ライブラリの方針でbegin系関数は設定だけ行いブロックしないのかも
  // configure traged server and url
  //http.begin("https://www.howsmyssl.com/a/check", ca); //HTTPS
  http.begin(httpurl); //HTTP

  Serial.print("[HTTP] GET...\n");
  // start connection and send HTTP header
  int httpCode = http.GET();

  // httpCode will be negative on error
  if(httpCode > 0) {
      // HTTP header has been send and Server response header has been handled
      Serial.printf("[HTTP] GET... code: %d\n", httpCode);

      // file found at server
      if(httpCode == HTTP_CODE_OK) {
          payload = http.getString();
          Serial.println(payload);
      }
  } else {
      Serial.printf("[HTTP] GET... failed, error: %s\n", http.errorToString(httpCode).c_str());
  }

  http.end();
  return payload;
}